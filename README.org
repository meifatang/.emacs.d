:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/init.el" @@commnet: global tangle file@@
:END:
#+TITLE: My Personal Emacs Config

* How
Keep Emacs config simple and native.
** To build and install Emacs
- To get source code, =git clone https:/git.savannah.gnu.org/git/emacs.git=
- To build
  #+begin_src shell :dir "~/src/Emacs/emacs/"
    git pull
    make extraclean
    ./autogen.sh
    ./configure --with-native-compilation --with-mailutils --with-xwidgets --with-imagemagick
    make
    make install
  #+end_src
** To config .emacs.d
- Clone .emacs.d to local with submodues
  #+begin_src shell
    git clone --recurse-submodules -j8 https://github.com/meifatang/.emacs.d ~/.emacs.d
  #+end_src
* early-init.el
Config early than init.el
[[file:early-init.el]]
* Init
Some common settings.
** Proxy
#+begin_src emacs-lisp
  (setq url-proxy-services
        '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
          ("http" . "127.0.0.1:7890")
          ("https" . "127.0.0.1:7890")))
  (setq url-gateway-method 'socks)
  (setq socks-server '("Default server" "127.0.0.1" 7890 5))
#+end_src

** Set enviroment
#+begin_src emacs-lisp
  (setenv "http_proxy" "http://127.0.0.1:7890")
  (setenv "https_proxy" "http://127.0.0.1:7890")
  (setenv "all_proxy" "socks5://127.0.0.1:7890")
  ;; (setenv "PATH" (concat "~/go/bin:" "~/bin:" "/usr/local/opt/ruby/bin:" "/usr/local/texlive/2021/bin/universal-darwin:" (getenv "PATH"))) ;; do not need
#+end_src

** Load path
#+begin_src emacs-lisp
  (defun add-folder-to-load-path (folder)
    "Add folder and subdirs to the `load-path'."
    (unless (member folder load-path)
      (add-to-list 'load-path folder))
    (dolist (f (directory-files folder))
      (let ((name (expand-file-name f folder)))
        (when (and (file-directory-p name)
                   (not (string-prefix-p "." f)))
          (add-folder-to-load-path name)))))

  (add-folder-to-load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-folder-to-load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Basic Config
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)

  (global-visual-line-mode)

  (server-start)

  (global-set-key (kbd "C-s-f") #'toggle-frame-fullscreen)

  ;;(setq save-interprogram-paste-before-kill t)

  (setq gc-cons-threshold 1000000000) ;; 100M
#+end_src

* built-in lisp/*
The built-in package. Explian and config if neccessary.
** a
*** abbrev
*** align
*** [[file:~/src/Emacs/emacs/lisp/allout.el][allout]]
*** [[file:~/src/Emacs/emacs/lisp/allout-widgets.el][allout-widgets]]
*** [[file:~/src/Emacs/emacs/lisp/ansi-color.el][ansi-color]]
*** apropos
*** arc-mode
*** array
*** [[file:~/src/Emacs/emacs/lisp/auth-source-pass.el][auth-source-pass]]
*** auth-source
*** autoarg
*** autoinsert
*** autorevert
*** avoid

** b
*** battery
*** bindings
*** bookmark
*** bs
*** buff-menu
*** button

** c
*** calc/
*** calculator
*** calender/
*** case-table
*** cdl
*** cedet/
*** char-fold
*** chistory
*** cmuscheme
*** color
*** comint
*** completion
*** cus-dep
*** cus-edit
*** cus0face
*** cus-load
*** cus-start
*** cus-theme
*** custom

** d
*** dabbrev
*** delim-col
*** delsel
*** descr-text
*** desktop
*** dframe
*** dired-aux
*** dired-loaddefs
*** dired-x
*** dired
To ignore =.DS_Store=
#+begin_src emacs-lisp
  (setq dired-omit-files "\\.DS_Store")
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src

*** dirtrack
*** disp-table
*** display-fill-column-indicator
*** display-line-numbers
*** dnd
*** doc-view
*** dom
*** dos-fns
*** dos-vars
*** dos-w32
*** double
*** dynnamic-setting

** e
*** ebuff-menu
*** echistory
*** ecomplete
*** edmacro
*** ehelp
*** elec-pair
*** electric
*** elide-head
*** emacs-lisp/
*** emacs-lock
*** emulation/
*** env
*** epa-dired
*** epa-file
*** epa-hook
*** epa-ks
*** epa-mail
*** epa
*** epg-config
*** epg
*** erc/
*** eshell/
*** expand
*** ezimage

** f
*** face-remap
*** facemenu
*** faces
*** ffap
*** filecache
*** fileloop
*** filenotify
*** files-x
*** files
*** filesets
*** find-cmd
*** find-dired
*** find-file
*** find-lisp
*** finder-inf
*** finder
*** flow-ctrl
*** foldout
*** follow
*** font-core
*** font-lock
*** format-spec
*** format
*** forms
*** frameset
*** fringe

** g
*** generic-x
*** gnus/

** h
*** help-at-pt
*** help-fns
*** help-macro
*** help-mode
*** help
*** hex-util
*** hexl
*** hfy-cmap
*** hi-lock
*** hilit-chg
*** hippie-exp
*** hl-line
*** htmlfontify-loaddefs
*** htmlfontify

** i
*** ibuf-ext
*** ibuf-macs
*** ibuffer-loaddefs
*** ibuffer
*** icomplete
*** ido
*** ielm
*** iimage
*** image/
*** image-dired
*** image-file
*** image-mode
*** image
*** imenu
*** indent
*** info-look
*** info-xref
*** info
*** informat
*** international/
*** isearch
*** isearchb

** j
*** jit-lock
*** jka-cmpr-hook
*** jka-compr
*** json
*** jsonrpc

** k
*** kermit
*** keymap
*** kmacro

** l
*** language/
*** ldefs-boot
*** leim/
*** linum
*** loaddefs
*** loadhist
*** loadyp
*** locate
*** lpr
*** ls-lisp

** m
*** macros
*** mail/
*** makesum
*** man
*** master
*** mb-depth
*** md4
*** menu-bar
*** mh-e
*** midnight
*** minibuffer-eldef
*** minibuffer
*** misc
*** misearch
*** mouse-copy
*** mouse-drag
*** mouse
*** mpc
*** msb
*** mwhell

** n
*** net/
*** newcommnet
*** notifications
*** novice
*** nxml/

** o
*** obarray
*** obsolete/
*** org/
*** outline

** p
*** paren
*** password-cache
*** pcmpl-csv
*** pcmpl-gnu
*** pcmpl-linux
*** pcmpl-rpm
*** pcmpl-unix
*** pcmpl-x
*** pccomplete
*** pixel-scroll
*** play/
*** plstore
*** printing
*** proced
*** profiler
*** progmodes/
*** ps-bdf
*** ps-def
*** ps-mule
*** ps-print-loaddefs
*** ps-print
*** ps-samp

** r
*** recentf
*** rect
*** register
*** repeat
*** replace
*** reposition
*** reveal
*** rfn-eshasow
*** rot13
*** rtree
*** ruler-mode

** s
*** savehist
*** saveplace
*** scroll-all
*** scroll-bar
*** scroll-lock
*** select
*** server
*** ses
*** shadowfile
*** shell
*** simple
*** skeleton
*** so-long
*** sort
*** soundex
*** speedbar
*** sqlite-mode
*** sqlite
*** startup
*** strokes
*** subdirs
*** subr
*** svg

** t
*** t-mouse
*** tab-bar
*** tab-line
*** tabify
*** talk
*** tar-mode
*** tempo
*** term/
*** term
*** textmodes/
*** thingatpt
*** thread
*** thumbs
*** time-stamp
*** time
*** timezone
*** tmm
*** tool-bar
*** tooltip
*** transient
*** tree-widget
*** tutorial
*** type-break

** u
*** uniquify
*** url/
*** userlock

** v
*** vc/
*** vcursor
*** version
*** view

** w
*** w32-fns
*** w32-vars
*** wdired
*** whitespace
*** wid-browse
*** wid-eidt
*** widget
*** windmove
*** window
*** winner
*** woman

** x
*** x-dnd
*** xdg
*** xml
*** xt-mouse
*** xwidget

** y
*** yank-media

* Package Managment
Third party package repos, location is =elpa=. And git based packages are add to submodues the location is =lisp/*=.
#+begin_src emacs-lisp
  (require 'packages)

  (setq package-archives '(("org"   . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("gnu"   . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package package-selected-packages)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

* Interface
** auto-dark
Copy from https://github.com/LionyxML/auto-dark-emacs
#+begin_src emacs-lisp :tangle no
  (require 'auto-dark)
#+end_src

** rainbow-delimiters
https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'which-key-mode)
#+end_src

** ido                                                             :ARCHIVE:
#+begin_src emacs-lisp :tangle no
  (ido-ubiquitous-mode 1)
#+end_src

** TODO ivy, swipper, counsel
https://github.com/abo-abo/swiper
https://github.com/abo-abo/swiper/blob/f0b2bc618a84d25c0b3d05314d5d5693c27b2d3e/doc/ivy-help.org#key-bindings-for-single-selection
#+begin_src emacs-lisp
  (ivy-mode)

  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (setq ivy-initial-inputs-alist '())

  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (setq search-default-mode #'char-fold-to-regexp)

  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

*** ivy-rich
https://github.com/Yevgnen/ivy-rich
#+begin_src emacs-lisp
  (require 'ivy-rich)
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src

** amx
https://github.com/DarwinAwardWinner/amx
To prioritizing your *most-used* commands in the completion list and showing keyboard shortcuts

** TODO google-this
https://github.com/Malabarba/emacs-google-this

** TODO helpful
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h F") #'helpful-function)
  (global-set-key (kbd "C-h C") #'helpful-command)
#+end_src

* Navigation
** TODO jump between windows
* Visual
** TODO smart-hungry-delete
https://github.com/hrehfeld/emacs-smart-hungry-delete
#+begin_src emacs-lisp
  (smart-hungry-delete-add-default-hooks)
  (global-set-key (kbd "<backspace>") 'smart-hungry-delete-backward-char)
  (global-set-key (kbd "C-d") 'smart-hungry-delete-forward-char)
#+end_src

* Editing
** expand-region
https://github.com/magnars/expand-region.el
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

** browse-kill-ring
https://github.com/browse-kill-ring/browse-kill-ring
Is Good 

* Project
** projectile
https://github.com/bbatsov/projectile
#+begin_src emacs-lisp :tangle no
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
#+end_src

* Version Control
** magit
https://github.com/magit/magit

** forge
https://github.com/magit/forge

* Files
** systemd-mode
** toml-mode
** yaml-mode
** ansible
https://github.com/k1LoW/emacs-ansible
#+begin_src emacs-lisp
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
#+end_src

** csv-mode
https://git.savannah.gnu.org/cgit/emacs/elpa.git/?h=externals/csv-mode
#+begin_src emacs-lisp
  (add-hook 'csv-mode-hook 'csv-align-mode)
#+end_src

** nginx-mode
https://github.com/ajc/nginx-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src

** jenkinsfile-mode
https://github.com/john2x/jenkinsfile-mode

** terraform-mode
https://github.com/emacsorphanage/terraform-mode

** dockerfile-mode
https://github.com/spotify/dockerfile-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+end_src

** docker-compose-mode
https://github.com/meqif/docker-compose-mode

* Languages
** go-mode
https://github.com/dominikh/go-mode.el

** rust-mode
https://github.com/rust-lang/rust-mode

** julia-mode
https://github.com/JuliaEditorSupport/julia-emacs

** slime
For Common lisp
#+begin_src emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+end_src

** haskell-mode
** erlang
** elixir-mode

* Programming
** yasnippet, yasnippet-snippets, yatemplate
https://github.com/joaotavora/yasnippet
https://github.com/AndreaCrotti/yasnippet-snippets
https://github.com/joaotavora/yasmate
#+begin_src emacs-lisp
  (require 'yasnippet)
  (require 'yasnippet-snippets)
  (require 'yatemplate)

  (setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))

  (add-hook 'after-init-hook 'yas-global-mode)
#+end_src

** lsp-mode
https://github.com/joaotavora/yasmate
#+begin_src emacs-lisp
  (require 'lsp-mode)
  (add-hook 'sh-mode-hook #'lsp)
  (add-hook 'python-mode #'lsp)
#+end_src

*** TODO dap-mode
https://github.com/emacs-lsp/dap-mode

** company
https://github.com/company-mode/company-mode
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** flycheck
https://github.com/flycheck/flycheck
#+begin_src emacs-lisp :tangle no
 (global-flycheck-mode)
#+end_src

* Shell
** exec-path-from-shell
https://github.com/purcell/exec-path-from-shell
#+begin_src emacs-lisp
  (require 'exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

* ESS
* DevOps
** emamux
https://github.com/emacsorphanage/emamux

** edbi
https://github.com/kiwanami/emacs-edbi

** pass
https://orgmode.org/manual/Tracking-your-habits.html

** logview
https://github.com/doublep/logview

** restclient
https://github.com/pashky/restclient.el

** kubernetes
https://github.com/kubernetes-el/kubernetes-el
https://kubernetes-el.github.io/kubernetes-el/

** docker
https://github.com/Silex/docker.el

** jenkins
https://github.com/rmuslimov/jenkins.el

* Internet
** 0x0
** leetcode
https://github.com/kaiwk/leetcode.el
#+begin_src emacs-lisp
  (setq leetcode-save-solutions t)
  (setq leetcode-directory "~/leetcode")
#+end_src

* Org
** Org
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
#+end_src

** Ob-x
*** ob-async
https://github.com/astahlman/ob-async

*** ob-go
https://github.com/ali2210/emacs--ob-go

*** ob-rust
https://github.com/zweifisch/ob-rust

*** ob-browser
https://github.com/krisajenkins/ob-browser

*** ob-dart
https://github.com/mzimmerm/ob-dart

*** ob-graphql
https://github.com/jdormit/ob-graphql

*** ob-http
https://github.com/zweifisch/ob-http

*** ob-ipython
https://github.com/gregsexton/ob-ipython

*** ob-mongo
https://github.com/krisajenkins/ob-mongo

*** ob-tmux
https://github.com/ahendriksen/ob-tmux

*** ob-uart
https://github.com/andrmuel/ob-uart

*** ob-restclient
https://github.com/alf/ob-restclient.el

** org-babel
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (setq org-babel-clojure-backend 'cider)

  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (awk . t)
     (shell . t)
     (go . t)
     (lisp . t)
     (http . t)
     (clojure . t)
     (sql . t)
     (js . t)
     (ditaa . t)
     (dot . t)
     (elixir . t)
     (julia . t)
     (R . t)
     (octave . t)
     (java . t)
     (lua . t)
     (haskell . t)
     (fortran . t)
     (ruby . t)
     (rust . t)))
#+end_src

** org-todo
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "|" "CANCELED(c)")))

  (setq org-log-done 'time)
  (setq org-log-done 'note)
#+end_src

** org-capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ;; GTD
          ("g" "Gettting Things Done" entry (file+headline "~/org/felix/gtd.org" "Tasks")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t))\n  %i  %a\n")

          ;; Reading, Learning
          ("r" "Reading List" entry (file+headline "~/org/felix/gtd.org" "Reading")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t))\n  %i  %a\n")
          ("l" "Learn" entry (file+headline "~/org/felix/gtd.org" "Learning")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t))\n  %i  %a\n")

          ;; Inbox, Journal
          ("i" "Inbox" entry (file+olp+datetree "~/org/felix/inbox.org")
           "* %?\n  %i  %a"
           :tree-type week)
          ("j" "Journal" entry (file+olp+datetree "~/org/felix/journal.org")
           "* %?\nEntered on %U\n  %i  %a"
           :tree-type week)

          ;; Health, Fitness
          ("h" "Health")
          ("hd" "Diet" table-line (file+headline "~/org/felix/health.org" "Diet")
           "| %u | %^{Food} | %^{Type} | %^{Note} |")
          ("hw" "Weight" table-line (file+headline "~/org/felix/health.org" "Weight")
           "| %U | %^{Weight} | %^{Note} |")

          ("f" "Fitness")
          ("fr" "Running" table-line (file+headline "~/org/felix/health.org" "Fitness" "Running")
           "| %U | %^{Distance} | %^{Avg.Pace} | %^{Note} |")

          ;; Finance
          ("F" "Finance Record" plain
           (file "~/org/felix/Finance/finance.journal")
           "%(org-read-date) %^{Description}
      %^{Category|Expenses:Food:Groceries|Expenses:Food:Dining|Expenses:Transport|Expenses:Home|Expenses:Entertainment|Revenues:Salary|Revenues:Misc}    %^{Amount}
      %^{Asset/Liability Account|Assets:Bank:Checking|Assets:Cash|Liabilities:Bank:Credit Card}"
           :empty-lines 1)

          ;; Entertainments
          ("e" "Entertainment")
          ("em" "Movie" entry (file+olp+datetree "~/org/felix/entertainments.org" "Movie")
           "* %?\nEntered on $U\n  %i  %a"
           :tree-type month)
          ("et" "TV Show" entry (file+olp+datetree "~/org/felix/entertainments.org" "TV")
           "* %?\nEntered on $U\n  %i  %a"
           :tree-type month)

          ;; Job
          ("J" "Job" table-line (file+headline "~/org/felix/job.org" "Logging")
           "| %U | %^{Company} | %^{Type} | %^{Status} | %^{Note} |")
          ))

  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

*** key
*** description
*** type
**** entry
**** item
**** checkitem
**** table-line
**** plain

*** target
**** file
**** id
**** file+headline
**** file+olp
**** file-regexp
**** file+datetree
**** file+datetree+prompt
**** file+weektree
**** file+weektree+promt
**** file+function
**** clock
**** function

*** template

** org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/felix/gtd.org"
                           "~/org/20220321210142-the_calculus_lifesaver.org"
                           "~/org/20220322134315-c_c_dev.org"
                           "~/org/20211011152232-tangmeifa_com.org"
                           "~/org/felix/job.org"
                           ))

  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

** TODO org-contrib
https://git.sr.ht/~bzg/org-contrib
#+begin_src emacs-lisp
#+end_src

** org2ctex
https://github.com/tumashu/org2ctex
_It take too long to load. do NOT tangle unless it is needed._
#+begin_src emacs-lisp :tangle no
  (require 'org2ctex)
  (org2ctex-toggle t)
#+end_src

*** alternative method
#+begin_src emacs-lisp
  (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f" "xelatex -interaction nonstopmode %f"))
#+end_src

** org-roam
https://github.com/org-roam/org-roam
#+begin_src emacs-lisp
  (setq org-roam-directory "~/org")
  (setq org-roam-v2-ack t)
  (setq org-roam-completion-everywhere t)

  (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))

  (org-roam-db-autosync-mode)
  ;;(add-hook 'org-roam-find-file-hook 'org-roam-buffer)

  (global-set-key (kbd "C-x j r") #'org-roam-node-random)
  (global-set-key (kbd "C-x j f") #'org-roam-node-find)
  (global-set-key (kbd "C-x j i") #'org-roam-node-insert)
  (global-set-key (kbd "C-x j t") #'org-roam-tag-add)
#+end_src

*** org-roam-ui
https://github.com/org-roam/org-roam-ui

** org-ref
https://github.com/jkitchin/org-ref

* Miscellaneous
** Newsticker (built-in)
#+begin_src emacs-lisp
  (setq newsticker-url-list
      '(("Emacs SE"
         "https://emacs.stackexchange.com/feeds")))
#+end_src
** pinentry
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
#+end_src

** hledger
https://gist.github.com/simonmichael/92aade653065ed9c9e215d03651b0baa

#+begin_src emacs-lisp
  (require 'hledger-mode)
  (add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode))
  (setq hledger-jfile "~/org/felix/finance/finance.journal")
#+end_src

** vterm
** slack
** bongo
** TODO Podcast
#+begin_src
"https://pinecast.com/feed/emacscast"
"https://liuyandong.com/feed/podcast"  
#+end_src

** rime
https://github.com/DogLooksGood/emacs-rime
#+begin_src emacs-lisp
  (setq default-input-method "rime")
  (setq rime-librime-root "~/.emacs.d/librime/dist")
  (setq rime-user-data-dir "~/Library/Rime")
#+end_src

** TODO telega
#+begin_src emacs-lisp
  ;; (setq telega-chat-show-avatars nil)
  ;; (setq telega-root-show-avatars nil)
  ;; (setq telega-user-show-avatars nil)
  ;; (setq telega-active-locations-show-avatars nil)
  ;; (setq telega-company-username-show-avatars nil)

  (setq telega-proxies (list '(:server "127.0.0.1" :port 7890 :enable t
                                       :type (:@type "proxyTypeSocks5"))))
#+end_src

** guix
https://notabug.org/alezost/emacs-guix

** nix
*** nix-mode
https://github.com/NixOS/nix-mode

*** nix-env-install
https://github.com/akirak/nix-env-install

*** nix-buffer
https://github.com/shlevy/nix-buffer

** midnight-mode
#+begin_src emacs-lisp
  (midnight-mode)
#+end_src

** restart-emacs
https://github.com/iqbalansari/restart-emacs

* *site-lisp/*
Package that is not from ELPA or MELPA

** color-rg
https://github.com/manateelazycat/color-rg.git
#+begin_src emacs-lisp
  (require 'color-rg)
#+end_src

** grammatical-edit
https://github.com/manateelazycat/grammatical-edit

** sudo-edit
https://github.com/nflath/sudo-edit.git
#+begin_src emacs-lisp
  (require 'sudo-edit)
#+end_src

** thing-edit
https://github.com/manateelazycat/thing-edit
#+begin_src emacs-lisp
  (require 'thing-edit)
#+end_src

** ecloud
https://github.com/meifatang/ecloud.git
Fork from https://github.com/techniumlabs/ecloud
Install Require: =pcache=
#+begin_src emacs-lisp
  (require 'ecloud)
#+end_src

** emacs-password-generator
https://github.com/vandrlexay/emacs-password-genarator.git
#+begin_src emacs-lisp
  (require 'password-generator)
#+end_src

** awesome-tray
Not realy good.
https://github.com/manateelazycat/awesome-tray.git
#+begin_src emacs-lisp :tangle no
  (require 'awesome-tray)
  (awesome-tray-mode 1)
#+end_src

* lisp/
** auto-save.el
Inspired from https://manateelazycat.github.io/emacs/2016/03/16/auto-save.html
#+begin_src emacs-lisp :tangle no
  (require 'auto-save)
  (auto-save-enable)
  (setq auto-save-slient t)
#+end_src

** geoip.el
Copy from https://github.com/NicolasPetton/emacs.d/blob/master/local/geoip.el
#+begin_src emacs-lisp
  (require 'geoip)
#+end_src

** felix.el
#+begin_src emacs-lisp
  (require 'felix)
#+end_src

** packages.el
See [[*Package Managment][Package Managment]]

* The End
** TODO load-theme felix theme
@@commnet: personal felix-theme@@
[[file:lisp/felix-theme.el]]
#+begin_src emacs-lisp
  (load-theme 'felix t)
#+end_src

** Private
[[file:init-private.el]]
#+begin_src emacs-lisp
  (when (file-exists-p (expand-file-name "init-private.el" user-emacs-directory))
    (load-file (expand-file-name "init-private.el" user-emacs-directory)))
#+end_src
