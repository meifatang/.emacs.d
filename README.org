:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/init.el"
:END:
#+TITLE: Felix's .emacs.d Config

* How to
Keep Emacs config simple and native. What I focus on is Emacs itself and functions.

** Install
- To get source code, =git clone https:/git.savannah.gnu.org/git/emacs.git=
- To build
  #+begin_src shell :dir "~/src/Emacs/emacs/"
    git pull
    make extraclean
    ./autogen.sh
    ./configure --with-native-compilation --with-mailutils --with-xwidgets --with-imagemagick
    make
    make install
  #+end_src

** Config
- Clone .emacs.d to local
  #+begin_src shell
    git clone --recurse-submodules -j8 https://github.com/meifatang/.emacs.d ~/.emacs.d
  #+end_src

Note: The ~site-lisp~ directory contains submodues
Below is the content of my config.

* early-init
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/early-init.el"
:END:

For my work machine. Mac mini

* Init
** Proxy
#+begin_src emacs-lisp
  (setq url-proxy-services
        '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
          ("http" . "127.0.0.1:7890")
          ("https" . "127.0.0.1:7890")))
  (setq url-gateway-method 'socks)
  (setq socks-server '("Default server" "127.0.0.1" 7890 5))
#+end_src

To set enviroment
#+begin_src emacs-lisp
  (setenv "http_proxy" "http://127.0.0.1:7890")
  (setenv "https_proxy" "http://127.0.0.1:7890")
  (setenv "all_proxy" "socks5://127.0.0.1:7890")
#+end_src

** Add folder to load path
#+begin_src emacs-lisp
  (defun add-folder-to-load-path (folder)
    "Add folder and subdirs to the `load-path'."
    (unless (member folder load-path)
      (add-to-list 'load-path folder))
    (dolist (f (directory-files folder))
      (let ((name (expand-file-name f folder)))
        (when (and (file-directory-p name)
                   (not (string-prefix-p "." f)))
          (add-folder-to-load-path name)))))

  (add-folder-to-load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-folder-to-load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Add tangle header and footer                                    :ARCHIVE:
#+begin_src emacs-lisp :tangle no
  (defun add-tangle-header-and-footer ()
    (message "running in %s" (buffer-file-name))
    (cond
     ((f-ext? (buffer-file-name) "el")
      (goto-char (point-min))
      (insert ";;; init.el --- -*- lexical-binding: t -*-\n;;; Commentary:\n;;; Code:\n\n")
      (goto-char (point-max))
      (insert "\n\(provide 'init\)
  ;;; init.el ends here\n"))
     (t
      nil))
    (save-buffer))

  (add-hook 'org-babel-post-tangle-hook 'felix/add-tangle-header-and-footer)
#+end_src

** Basic Config
#+begin_src emacs-lisp
  (setq user-full-name "Felix Tang")
  (setq user-mail-address "me@tangmeifa.com")

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)

  (global-visual-line-mode)

  (server-start)

  (global-set-key (kbd "C-s-f") #'toggle-frame-fullscreen)

  ;;(setq save-interprogram-paste-before-kill t)

  (setq gc-cons-threshold 1000000000) ;; 100M
#+end_src

* Emacs built-in lisp/* files
** a
*** abbrev
*** align
*** [[file:~/src/Emacs/emacs/lisp/allout.el][allout]]
*** [[file:~/src/Emacs/emacs/lisp/allout-widgets.el][allout-widgets]]
*** [[file:~/src/Emacs/emacs/lisp/ansi-color.el][ansi-color]]
*** apropos
*** arc-mode
*** array
*** [[file:~/src/Emacs/emacs/lisp/auth-source-pass.el][auth-source-pass]]
*** auth-source
*** autoarg
*** autoinsert
*** autorevert
*** avoid

** b
*** TODO backtree
*** battery
*** bindings
*** bookmark
*** bs
*** buff-menu
*** button

** c
*** calc/
*** calculator
*** calender/
*** case-table
*** cdl
*** cedet/
*** char-fold
*** chistory
*** cmuscheme
*** color
*** comint
*** completion
*** cus-dep
*** cus-edit
*** cus0face
*** cus-load
*** cus-start
*** cus-theme
*** custom

** d
*** dabbrev
*** delim-col
*** delsel
*** descr-text
*** desktop
*** dframe
*** dired-aux
*** dired-loaddefs
*** dired-x
*** dired
*** dirtrack
*** disp-table
*** display-fill-column-indicator
*** display-line-numbers
*** dnd
*** doc-view
*** dom
*** dos-fns
*** dos-vars
*** dos-w32
*** double
*** dynnamic-setting

** e
*** ebuff-menu
*** echistory
*** ecomplete
*** edmacro
*** ehelp
*** elec-pair
*** electric
*** elide-head
*** emacs-lisp/
*** emacs-lock
*** emulation/
*** env
*** epa-dired
*** epa-file
*** epa-hook
*** epa-ks
*** epa-mail
*** epa
*** epg-config
*** epg
*** erc/
*** eshell/
*** expand
*** ezimage

** f
*** face-remap
*** facemenu
*** faces
*** ffap
*** filecache
*** fileloop
*** filenotify
*** files-x
*** files
*** filesets
*** find-cmd
*** find-dired
*** find-file
*** find-lisp
*** finder-inf
*** finder
*** flow-ctrl
*** foldout
*** follow
*** font-core
*** font-lock
*** format-spec
*** format
*** forms
*** frameset
*** fringe

** g
*** generic 
*** 

* Package
Emacs's package managment is ugly. But I do not care.

** ELPA
#+begin_src emacs-lisp
  (setq package-list '(google-this exec-path-from-shell rime pinentry auctex
                                   rainbow-delimiters sudo-edit which-key ivy counsel amx ivy-rich helpful
                                   csv-mode nginx-mode jenkinsfile-mode dockerfile-mode
                                   undo-tree smart-hungry-delete
                                   expand-region browse-kill-ring
                                   projectile
                                   magit forge
                                   toml-mode yaml-mode ansible csv-mode nginx-mode jenkinsfile-mode
                                   terraform-mode dockerfile-mode docker-compose-mode
                                   go-mode rust-mode julia-mode slime haskell-mode erlang elixir-mode applescript-mode
                                   yasnippet yasnippet-snippets yatemplate
                                   lsp-mode company flycheck
                                   ess
                                   emamux edbi pass logview restclient docker kubernetes jenkins
                                   0x0 elfeed leetcode
                                   ob-async ob-go ob-rust ob-browser ob-dart ob-graphql
                                   ob-http ob-ipython ob-mongo ob-tmux ob-uart ob-restclient ob-elixir
                                   org2ctex org-roam org-roam-ui org-ref
                                   org-noter org-pdftools org-noter-pdftools pdf-tools
                                   hledger-mode telega bongo slack vterm
                                   restart-emacs guix nix-mode nix-env-install nix-buffer pcache))

  (setq package-archives '(("org"   . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("gnu"   . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** site-lisp/*
Package that is not from ELPA or MELPA

** lisp/*
My custom Code. Include Repository fork from others.

* Interface
** rainbow-delimiters
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** which-key
https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'which-key-mode)
#+end_src

** ido                                                             :ARCHIVE:
#+begin_src emacs-lisp :tangle no
  (ido-ubiquitous-mode 1)
#+end_src

** TODO ivy, swipper, counsel
https://github.com/abo-abo/swiper

(ivy-immediate-done)
https://github.com/abo-abo/swiper/blob/f0b2bc618a84d25c0b3d05314d5d5693c27b2d3e/doc/ivy-help.org#key-bindings-for-single-selection

#+begin_src emacs-lisp
  (ivy-mode)

  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (setq ivy-initial-inputs-alist '())

  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (setq search-default-mode #'char-fold-to-regexp)

  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

*** ivy-rich
https://github.com/Yevgnen/ivy-rich

#+begin_src emacs-lisp
  (require 'ivy-rich)
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src

** amx
https://github.com/DarwinAwardWinner/amx

To prioritizing your *most-used* commands in the completion list and showing keyboard shortcuts

** TODO google-this
https://github.com/Malabarba/emacs-google-this

** TODO helpful
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h F") #'helpful-function)
  (global-set-key (kbd "C-h C") #'helpful-command)
#+end_src

* Navigation
* Visual
** undo-tree
https://github.com/akhayyat/emacs-undo-tree

=undo-tree-visualize= is awesome

#+begin_src emacs-lisp
  (require 'undo-tree)
  (global-undo-tree-mode)
#+end_src

** TODO smart-hungry-delete
https://github.com/hrehfeld/emacs-smart-hungry-delete

#+begin_src emacs-lisp
  (smart-hungry-delete-add-default-hooks)
  (global-set-key (kbd "<backspace>") 'smart-hungry-delete-backward-char)
  (global-set-key (kbd "C-d") 'smart-hungry-delete-forward-char)
#+end_src

* Editing
** sudo-edit
https://github.com/nflath/sudo-edit

#+begin_src emacs-lisp
  (require 'sudo-edit)
#+end_src

** expand-region
https://github.com/magnars/expand-region.el

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

** browse-kill-ring
https://github.com/browse-kill-ring/browse-kill-ring
Is Good 

** TODO thing-edit
https://github.com/manateelazycat/thing-edit

#+begin_src emacs-lisp
  (require 'thing-edit)
#+end_src

* Project
** projectile
https://github.com/bbatsov/projectile

#+begin_src emacs-lisp :tangle no
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
#+end_src

* Version Control
** magit
https://github.com/magit/magit

** forge
https://github.com/magit/forge

* Files
** systemd-mode
** toml-mode
** yaml-mode
** ansible
https://github.com/k1LoW/emacs-ansible

#+begin_src emacs-lisp
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
#+end_src

** csv-mode
https://git.savannah.gnu.org/cgit/emacs/elpa.git/?h=externals/csv-mode

#+begin_src emacs-lisp
  (add-hook 'csv-mode-hook 'csv-align-mode)
#+end_src

** nginx-mode
https://github.com/ajc/nginx-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src

** jenkinsfile-mode
https://github.com/john2x/jenkinsfile-mode

** terraform-mode
https://github.com/emacsorphanage/terraform-mode

** dockerfile-mode
https://github.com/spotify/dockerfile-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+end_src

** docker-compose-mode
https://github.com/meqif/docker-compose-mode

* Languages
** go-mode
https://github.com/dominikh/go-mode.el

** rust-mode
https://github.com/rust-lang/rust-mode

** julia-mode
https://github.com/JuliaEditorSupport/julia-emacs

** slime
For Common lisp

#+begin_src emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+end_src

** haskell-mode
** erlang
** elixir-mode

* Programming
** yasnippet, yasnippet-snippets, yatemplate
https://github.com/joaotavora/yasnippet
https://github.com/AndreaCrotti/yasnippet-snippets
https://github.com/joaotavora/yasmate

#+begin_src emacs-lisp
  (require 'yasnippet)
  (require 'yasnippet-snippets)
  (require 'yatemplate)

  (setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))

  (add-hook 'after-init-hook 'yas-global-mode)
#+end_src

** lsp-mode
https://github.com/joaotavora/yasmate

#+begin_src emacs-lisp
  (require 'lsp-mode)
  (add-hook 'sh-mode-hook #'lsp)
  (add-hook 'python-mode #'lsp)
#+end_src

*** TODO dap-mode
https://github.com/emacs-lsp/dap-mode

** company
https://github.com/company-mode/company-mode

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** flycheck
https://github.com/flycheck/flycheck

#+begin_src emacs-lisp :tangle no
 (global-flycheck-mode)
#+end_src

* Shell
** exec-path-from-shell
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp
  (require 'exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

* ESS

* DevOps
** emamux
https://github.com/emacsorphanage/emamux

** edbi
https://github.com/kiwanami/emacs-edbi

** pass
https://orgmode.org/manual/Tracking-your-habits.html

** logview
https://github.com/doublep/logview

** restclient
https://github.com/pashky/restclient.el

** kubernetes
https://github.com/kubernetes-el/kubernetes-el

** docker
https://github.com/Silex/docker.el

** jenkins
https://github.com/rmuslimov/jenkins.el

** ecloud
https://github.com/meifatang/ecloud Fork from https://github.com/techniumlabs/ecloud

Install Require: =pcache=

#+begin_src emacs-lisp
  (require 'ecloud)
#+end_src

** password-generator
https://github.com/vandrlexay/emacs-password-genarator

#+begin_src emacs-lisp
  (require 'password-generator)
#+end_src

* Internet
** 0x0
** elfeed
https://github.com/skeeto/elfeed

#+begin_src emacs-lisp
  (setq elfeed-feeds
      '("http://nullprogram.com/feed/"
        "https://planet.emacslife.com/atom.xml"
        "https://www.lujun9972.win/rss.xml"
        ))
#+end_src

** leetcode
https://github.com/kaiwk/leetcode.el

#+begin_src emacs-lisp
  (setq leetcode-save-solutions t)
  (setq leetcode-directory "~/leetcode")
#+end_src

* Org
** org
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
#+end_src

** valign-mode                                                     :ARCHIVE:
https://github.com/casouri/valign

#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook #'valign-mode)
#+end_src

** Ob-*
*** ob-async
https://github.com/astahlman/ob-async

*** ob-go
https://github.com/ali2210/emacs--ob-go

*** ob-rust
https://github.com/zweifisch/ob-rust

*** ob-browser
https://github.com/krisajenkins/ob-browser

*** ob-dart
https://github.com/mzimmerm/ob-dart

*** ob-graphql
https://github.com/jdormit/ob-graphql

*** ob-http
https://github.com/zweifisch/ob-http

*** ob-ipython
https://github.com/gregsexton/ob-ipython

*** ob-mongo
https://github.com/krisajenkins/ob-mongo

*** ob-tmux
https://github.com/ahendriksen/ob-tmux

*** ob-uart
https://github.com/andrmuel/ob-uart

*** ob-restclient
https://github.com/alf/ob-restclient.el

** org-babel
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  ;;(setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (shell . t)
     (go . t)
     (lisp . t)
     (http . t)
     (clojure . t)
     (sql . t)
     (js . t)
     ;;(ts . t)
     (dot . t)
     (elixir . t)
     (julia . t)
     (R . t)
     (octave . t)
     (java . t)
     (haskell . t)
     (ruby . t)
     (rust . t)))
#+end_src

** org-todo
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "|" "CANCELED(c)")))

  (setq org-log-done 'time)
  (setq org-log-done 'note)
#+end_src

** org-capture
#+begin_src emacs-lisp
   ;;(setq org-default-notes-file (concat org-directory "/notes.org"))
   (setq org-capture-templates
         '(("g" "Gettting Things Done" entry (file+headline "~/org/Self/gtd.org" "Tasks")
            "* TODO %?\n  %i\n  %a")

           ;; Inbox, Journal
           ("i" "Inbox" entry (file+olp+datetree "~/org/Self/inbox.org")
            "* %?\nEntered on %U\n  %i\n  %a")
           ("j" "Journal" entry (file+olp+datetree "~/org/Self/journal.org")
            "* %?\nEntered on %U\n  %i\n  %a")
           
           ;; Health
           ("d" "Diet" entry (file+olp+datetree "~/org/Self/diet.org")
            "* %?\nEntered on $U\n  %i\n  %a")
           ("h" "Health" entry (file+olp+datetree "~/org/Self/health.org")
            "* %?\nEntered on $U\n  %i\n  %a")
           ("f" "Fitness" entry (file+olp+datetree "~/org/Self/fitness.org")
            "* %?\nEntered on $U\n  %i\n  %a")

           ;; Grow
           ("r" "Read" entry (file+olp+datetree "~/org/Self/read.org")
            "* %?\nEntered on $U\n  %i\n  %a")
           ("l" "Learn" entry (file+olp+datetree "~/org/Self/learn.org")
            "* %?\nEntered on $U\n  %i\n  %a")

           ;; Finance
           ("F" "Finance" plain
            (file "~/org/Self/Finance/finance.journal")
            "%(org-read-date) %^{Description}
       %^{Category|Expenses:Food:Groceries|Expenses:Food:Dining|Expenses:Transport|Expenses:Home|Expenses:Entertainment|Revenues:Salary|Revenues:Misc}    %^{Amount}
       %^{Asset/Liability Account|Assets:Bank:Checking|Assets:Cash|Liabilities:Bank:Credit Card}"
            :empty-lines 1)

           ("e" "Entertainment")
           ("em" "Movie" entry (file+olp+datetree "~/org/Self/entertainments.org" "Movie")
            "* %?\nEntered on $U\n  %i\n  %a")
           ("et" "TV Show" entry (file+olp+datetree "~/org/Self/entertainments.org" "TV")
            "* %?\nEntered on $U\n  %i\n  %a")

           ("3" "fzm")
           ("3t" "fzm's Todo" entry (file+headline "~/org/fzm/fzm-gtd.org" "Tasks")
            "* TODO %?\n  %i\n  %a")
           ("3l" "fzm's Work Log" entry (file+olp+datetree "~/org/fzm/fzm-log.org")
            "* %?\nEntered on %U\n  %i\n  %a")

           ))
#+end_src

*** key
*** description
*** type
**** entry
**** item
**** checkitem
**** table-line
**** plain

*** target
**** file
**** id
**** file+headline
**** file+olp
**** file-regexp
**** file+datetree
**** file+datetree+prompt
**** file+weektree
**** file+weektree+promt
**** file+function
**** clock
**** function

*** template

** org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/33cn/gtd.org" "~/org/gtd.org"))
#+end_src

** org-superstart-mode
https://github.com/sabof/org-bullets

#+begin_src emacs-lisp
  ;;(require 'org-superstar)
  ;;(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** org2ctex
https://github.com/tumashu/org2ctex

#+begin_src emacs-lisp
  (require 'org2ctex)
  (org2ctex-toggle t)
#+end_src

** org-roam
https://github.com/org-roam/org-roam

#+begin_src emacs-lisp
  (setq org-roam-directory "~/org")
  (setq org-roam-v2-ack t)
  (setq org-roam-completion-everywhere t)

  (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))

  (org-roam-db-autosync-mode)
  ;;(add-hook 'org-roam-find-file-hook 'org-roam-buffer)

  (global-set-key (kbd "C-x j r") #'org-roam-node-random)
  (global-set-key (kbd "C-x j f") #'org-roam-node-find)
  (global-set-key (kbd "C-x j i") #'org-roam-node-insert)
  (global-set-key (kbd "C-x j t") #'org-roam-tag-add)
#+end_src

*** org-roam-ui
https://github.com/org-roam/org-roam-ui

** org-ref
https://github.com/jkitchin/org-ref

* Miscellaneous
** pinentry
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
#+end_src
** hledger
https://gist.github.com/simonmichael/92aade653065ed9c9e215d03651b0baa

#+begin_src emacs-lisp
  (require 'hledger-mode)
  (add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode))
  (setq hledger-jfile "~/org/Self/finance/finance.journal")
#+end_src

** vterm
** slack
** bongo
** TODO Podcast
#+begin_src
"https://pinecast.com/feed/emacscast"
"https://liuyandong.com/feed/podcast"  
#+end_src

** rime
https://github.com/DogLooksGood/emacs-rime

#+begin_src emacs-lisp
  (setq default-input-method "rime")
  (setq rime-librime-root "~/.emacs.d/librime/dist")
#+end_src

** TODO telega
#+begin_src emacs-lisp
  ;; (setq telega-chat-show-avatars nil)
  ;; (setq telega-root-show-avatars nil)
  ;; (setq telega-user-show-avatars nil)
  ;; (setq telega-active-locations-show-avatars nil)
  ;; (setq telega-company-username-show-avatars nil)

  (setq telega-proxies (list '(:server "127.0.0.1" :port 7890 :enable t
                                       :type (:@type "proxyTypeSocks5"))))
#+end_src

** guix
https://notabug.org/alezost/emacs-guix

** nix
*** nix-mode
https://github.com/NixOS/nix-mode

*** nix-env-install
https://github.com/akirak/nix-env-install

*** nix-buffer
https://github.com/shlevy/nix-buffer

** midnight-mode
#+begin_src emacs-lisp
  (midnight-mode)
#+end_src

** restart-emacs
https://github.com/iqbalansari/restart-emacs

** lisp/geoip.el
Copy from https://github.com/NicolasPetton/emacs.d/blob/master/local/geoip.el

[[file:lisp/geoip.el][geoip.el]]

#+begin_src emacs-lisp
  (require 'geoip)
#+end_src

* Felix's Functions
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/lisp/felix.el"
:END:

[[file:lisp/felix.el][felix.el]]

** open-with-vscode
#+begin_src emacs-lisp
  (defun open-with-vscode ()
    "Open current file with vscode."
    (interactive)
    (let ((line (number-to-string (line-number-at-pos)))
          (column (number-to-string (current-column))))
      (apply 'call-process "code" nil nil nil (list (concat buffer-file-name ":" line ":" column) "--goto"))))
#+end_src

** TODO things custom to add ip thing

** provide-function
#+begin_src emacs-lisp
  (provide 'felix)
#+end_src

* Felix's Theme
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/felix-theme.el"
:END:
** deftheme
#+begin_src emacs-lisp
  (deftheme felix
    "Created 2021-12-05.")
#+end_src

** custom-theme-set-variables
** custom-theme-set-faces
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'felix

   ;; org custom
   '(org-level-1 ((t (:inherit outline-1 :extend nil :weight bold))))
   '(org-level-2 ((t (:inherit outline-2 :extend nil :weight bold))))
   '(org-level-3 ((t (:inherit outline-3 :extend nil :weight bold))))
   '(org-level-4 ((t (:inherit outline-4 :extend nil :weight bold))))
   '(org-level-5 ((t (:inherit outline-5 :extend nil :weight bold))))
   '(org-level-6 ((t (:inherit outline-6 :extend nil :weight bold))))
   '(org-level-7 ((t (:inherit outline-7 :extend nil :weight bold))))
   '(org-level-8 ((t (:inherit outline-8 :extend nil :weight bold))))
   )
#+end_src

** provide-theme
#+begin_src emacs-lisp
  (provide-theme 'felix)
#+end_src

* The End
** load-theme
#+begin_src emacs-lisp
  (load-theme 'felix t)
#+end_src

** Private
#+begin_src emacs-lisp
  (when (file-exists-p (expand-file-name "init-private.el" user-emacs-directory))
    (load-file (expand-file-name "init-private.el" user-emacs-directory)))
#+end_src

Bye!
